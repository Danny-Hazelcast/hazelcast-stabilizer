#!/bin/bash

if [ -z "${STABILIZER_HOME}" ] ; then
    export STABILIZER_HOME=$(cd $(dirname $(readlink -f $0 2> /dev/null || readlink $0 2> /dev/null || echo $0))/.. && pwd)
fi

echo  STABILIZER_HOME = ${STABILIZER_HOME}

COMMAND=startmachines
CLUSTER_SIZE=small
RESTART=false

function init_environment {
    . ${STABILIZER_HOME}/bin/start.properties

    for i in "$@"
    do
        case $i in
            --clustersize=*)
                CLUSTER_SIZE="${i#*=}";;
            --restart)
                COMMAND="restart";;
            --download)
                COMMAND="download";;
            *)
                # unknown option
                echo Unknown option $1
                exit
                ;;
        esac
    done

    case $CLUSTER_SIZE in
        "single")
                INSTANCE_COUNT=1;;
        "tiny")
               INSTANCE_COUNT=2;;
        "small")
                INSTANCE_COUNT=4;;
        "medium")
                INSTANCE_COUNT=6;;
        "large")
                INSTANCE_COUNT=10;;
        "xlarge")
                INSTANCE_COUNT=20;;
        "2xlarge")
                INSTANCE_COUNT=40;;
        "3xlarge")
                INSTANCE_COUNT=100;;
        *)
                echo Unknown cluster size ${CLUSTER_SIZE}
                exit
                ;;
    esac

    echo INSTANCE_COUNT ${INSTANCE_COUNT} CLUSTER_SIZE = ${CLUSTER_SIZE}
}

function private_ip {
    local INSTANCE=$1
    local PRIVATE_IP=$( ec2-describe-instances | grep ${INSTANCE} | cut -f 18 )
    echo ${PRIVATE_IP}
}

function wait_started {
    local INSTANCE=$1

    echo "Waiting for instance $INSTANCE"

    for ATTEMPT in {1..300}
    do
        local STATUS_CHECKS=$( ec2-describe-instance-status ${INSTANCE} | sed -n 1p | cut -f 4 )
        local INSTANCE_STATUS=$( ec2-describe-instance-status ${INSTANCE} | sed -n 3p | cut -f 3 )

        if [ "${INSTANCE_STATUS}" = "passed" ] ;
        then
            echo Instance ${INSTANCE} is running
            return
        else
            echo [${ATTEMPT}] Status: [${INSTANCE_STATUS}]
        fi
    done

    echo ${INSTANCE} Failed to start
    ec2-describe-instance-status ${INSTANCE}
    exit
}

function install_stabilizer {
    local PRIVATE_IP=$1

    echo ==============================================================
    echo Installing Coach on ${PRIVATE_IP}
    echo ==============================================================

    local MEMBERS=""
    for IP in "${PRIVATE_IP_LIST[@]}"
    do
        MEMBERS="$MEMBERS<member>$IP:$COACH_PORT</member>\n"
    done

    cp coach-hazelcast-template.xml coach-hazelcast.xml
    cat coach-hazelcast.xml | sed -e "s@MEMBERS@$MEMBERS@" > coach-hazelcast.xml.bak && mv coach-hazelcast.xml.bak coach-hazelcast.xml

    echo "Installing missing Java"
    #install java under Ubuntu.
    ssh -i ${LICENSE} -q -o StrictHostKeyChecking=no ${USER}@${PRIVATE_IP} "sudo apt-get update || true"
    ssh -i ${LICENSE} -q -o StrictHostKeyChecking=no ${USER}@${PRIVATE_IP} "sudo apt-get install -y openjdk-7-jdk || true"

    echo "Copying stabilizer files"
    #we need to pull out this property
    scp -i ${LICENSE} -q -r ${STABILIZER_HOME} ${USER}@${PRIVATE_IP}:
    #we need to override the hazelcast config file with the one we generated.
    scp -i ${LICENSE} -q coach-hazelcast.xml ${USER}@${PRIVATE_IP}:hazelcast-stabilizer-0.1-SNAPSHOT/conf/

    echo ==============================================================
    echo Successfully installed Coach on ${PRIVATE_IP}
    echo ==============================================================
}

function install_stabilizer_on_all_machines {

    for PRIVATE_IP in "${PRIVATE_IP_LIST[@]}"
    do
        install_stabilizer $PRIVATE_IP
    done
    echo "Completed Installation"
}

function init_manager_file {
    local PRIVATE_IP=$1

    local MEMBERS=""
    for PRIVATE_IP in "${PRIVATE_IP_LIST[@]}"
    do
        MEMBERS="$MEMBERS<address>$PRIVATE_IP:$COACH_PORT</address>\n"
    done

    cp manager-hazelcast-template.xml manager-hazelcast.xml
    cat manager-hazelcast.xml | sed -e "s@MEMBERS@$MEMBERS@" > manager-hazelcast.xml.bak && mv manager-hazelcast.xml.bak manager-hazelcast.xml
}

function start_coach {
    local PRIVATE_IP=$1

    echo ==============================================================
    echo Starting Coach on ${PRIVATE_IP}
    echo ==============================================================

    #we need to pull out this property
    ssh -o StrictHostKeyChecking=no -i ${LICENSE} ${USER}@${PRIVATE_IP} \
        "killall -9 java ; nohup hazelcast-stabilizer-0.1-SNAPSHOT/bin/coach  > coach.out 2> coach.err < /dev/null &"

    echo ==============================================================
    echo Successfully Started Coach on ${PRIVATE_IP}
    echo ==============================================================
}

function start_coaches {
    for PRIVATE_IP in "${PRIVATE_IP_LIST[@]}"
    do
        start_coach ${PRIVATE_IP}
    done
    echo Coaches started
}

function echo_list_machines {
    for PRIVATE_IP in "${PRIVATE_IP_LIST[@]}"
    do
        echo -- Coach ${PRIVATE_IP}
    done
}

function spawn_machines {
    echo Starting ${INSTANCE_COUNT} ${INSTANCE_TYPE} machines

    START_STATUS=$( ec2-run-instances \
        --availability-zone $AVAILABILITY_ZONE \
        --instance-type $INSTANCE_TYPE \
        --instance-count $INSTANCE_COUNT \
        --group $SECURITY_GROUP \
        --key $KEY_PAIR \
        $AMI )

    echo ==============================================================
    echo "$START_STATUS"
    echo ==============================================================

    TMP=$( mktemp )

    #temp hack writing to file to deal with loosing the linefeeds.
    echo "$START_STATUS" > $TMP
    local STR=$( cat $TMP | grep INSTANCE |  awk '{print $2}' )
    echo $STR

    INSTANCES=(`echo $STR | tr "," "\n"`)

    echo instances
    for INSTANCE in "${INSTANCES[@]}"
    do
        echo "> [$INSTANCE]"
        wait_started $INSTANCE
    done

    echo ==============================================================
    echo Successfully started ${INSTANCE_COUNT} ${INSTANCE_TYPE} machines
    echo ==============================================================

    echo "" > machine_list.txt
    PRIVATE_IP_LIST=()
    for INSTANCE in "${INSTANCES[@]}"
    do
        PRIVATE_IP=$( private_ip $INSTANCE )
        PRIVATE_IP_LIST+=("$PRIVATE_IP")
        echo -e "${PRIVATE_IP}" >> machine_list.txt
    done
}

function restart_coaches {
    echo Restarting ${INSTANCE_COUNT} ${INSTANCE_TYPE} machines

    PRIVATE_IP_LIST=readarray PRIVATE_IP_LIST<machine_list.txt

    echo "Killing all Java Processes"
    for PRIVATE_IP in "${PRIVATE_IP_LIST[@]}"
    do
       ssh -o StrictHostKeyChecking=no -i ${LICENSE} ${USER}@${PRIVATE_IP}  "killall -9 java"
    done

    start_coaches
    echo Coaches started

    list_machines

    echo ==============================================================
    echo Successfully Restarted  ${INSTANCE_COUNT} ${INSTANCE_TYPE} machines
    echo ==============================================================
}

function download {
    echo ==============================================================
    echo Download artifacts
    echo ==============================================================

   PRIVATE_IP_LIST=readarray PRIVATE_IP_LIST<machine_list.txt

    echo "Killing all Java Processes"
    for PRIVATE_IP in "${PRIVATE_IP_LIST[@]}"
    do
       echo Downoading from $PRIVATE_IP
       scp -i ${LICENSE} -q -r ${USER}@${PRIVATE_IP}:hazelcast-stabilizer-0.1-SNAPSHOT/conf/ ${STABILIZER_HOME}/gym/
    done

    echo "Copying stabilizer files"
    #we need to pull out this property
    scp -i ${LICENSE} -q -r ${STABILIZER_HOME} ${USER}@${PRIVATE_IP}:
    #we need to override the hazelcast config file with the one we generated.
    scp -i ${LICENSE} -q coach-hazelcast.xml ${USER}@${PRIVATE_IP}:hazelcast-stabilizer-0.1-SNAPSHOT/conf/

    echo ==============================================================
    echo Finished Downloading Artifacts 
    echo ==============================================================
}

init_environment $@

case ${COMMAND} in
    "startmachines")
        spawn_machines
        install_stabilizer_on_all_machines
        init_manager_file
        start_coaches
        echo_list_machines
        ;;
    "restart")
        restart_coaches
        ;;
    "download")
        download
        ;;
esac

